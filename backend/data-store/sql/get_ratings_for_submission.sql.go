// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: get_ratings_for_submission.sql

package queries

import (
	"context"
)

const getRatingsForSubission = `-- name: GetRatingsForSubission :many
select
    rating.rating_id   as "rating_id",
    rating.type        as "type",
    rating.is_draft    as "is_draft",
    rating.assessor_id as "assessor_id"
from project.rating as rating
where
    rating.submission_id = $1
`

type GetRatingsForSubissionRow struct {
	RatingID   int32
	Type       ProjectRatingType
	IsDraft    bool
	AssessorID int32
}

func (q *Queries) GetRatingsForSubission(ctx context.Context, submissionID int32) ([]GetRatingsForSubissionRow, error) {
	rows, err := q.db.Query(ctx, getRatingsForSubission, submissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRatingsForSubissionRow
	for rows.Next() {
		var i GetRatingsForSubissionRow
		if err := rows.Scan(
			&i.RatingID,
			&i.Type,
			&i.IsDraft,
			&i.AssessorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
