// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: get_submissions_by_assessor_email.sql

package queries

import (
	"context"
)

const getSubmissionsByAssessorEmail = `-- name: GetSubmissionsByAssessorEmail :many
select
    submission.submission_id as "submission_id",
    contest.year             as "year",
    submission.name          as "name",
    submission.duration_days as "duration_days"
from project.assessor_submission assessor_submission
inner join project.submission submission  on submission.submission_id   = assessor_submission.submission_id
inner join edition.contest    contest     on contest.contest_id         = submission.contest_id
inner join person.assessor    assessor    on assessor.assessor_id       = assessor_submission.assessor_id
inner join person.ipma_expert ipma_expert on ipma_expert.ipma_expert_id = assessor.ipma_expert_id
inner join person.base        person      on person.person_id           = ipma_expert.person_id
where
    person.email = $1
`

type GetSubmissionsByAssessorEmailRow struct {
	SubmissionID int32
	Year         int32
	Name         string
	DurationDays int32
}

func (q *Queries) GetSubmissionsByAssessorEmail(ctx context.Context, email string) ([]GetSubmissionsByAssessorEmailRow, error) {
	rows, err := q.db.Query(ctx, getSubmissionsByAssessorEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSubmissionsByAssessorEmailRow
	for rows.Next() {
		var i GetSubmissionsByAssessorEmailRow
		if err := rows.Scan(
			&i.SubmissionID,
			&i.Year,
			&i.Name,
			&i.DurationDays,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
