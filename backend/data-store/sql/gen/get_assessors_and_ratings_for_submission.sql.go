// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: get_assessors_and_ratings_for_submission.sql

package queries

import (
	"context"
)

const getAssessorsAndRatingsForSubmission = `-- name: GetAssessorsAndRatingsForSubmission :many
select
    base.first_name       as "first_name",
    base.last_name        as "last_name",
    assessor.assessor_id  as "assessor_id",
    full_rating.rating_id as "rating_id",
    full_rating.type      as "rating_type",
    full_rating.is_draft  as "is_draft"
from project.assessor_submission
inner join person.assessor    as assessor    on assessor.assessor_id = assessor_submission.assessor_id -- join to get ipma_expert_id
inner join person.ipma_expert as ipma_expert on ipma_expert.ipma_expert_id = assessor.ipma_expert_id   -- join to get person_id
inner join person.base        as base        on base.person_id = ipma_expert.person_id                 -- join to get first_name and last_name
inner join project.rating     as full_rating on full_rating.assessor_id = assessor.assessor_id
where assessor_submission.submission_id = $1
    and full_rating.submission_id = $1
`

type GetAssessorsAndRatingsForSubmissionRow struct {
	FirstName  string
	LastName   string
	AssessorID int32
	RatingID   int32
	RatingType ProjectRatingType
	IsDraft    bool
}

func (q *Queries) GetAssessorsAndRatingsForSubmission(ctx context.Context, submissionID int32) ([]GetAssessorsAndRatingsForSubmissionRow, error) {
	rows, err := q.db.Query(ctx, getAssessorsAndRatingsForSubmission, submissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAssessorsAndRatingsForSubmissionRow
	for rows.Next() {
		var i GetAssessorsAndRatingsForSubmissionRow
		if err := rows.Scan(
			&i.FirstName,
			&i.LastName,
			&i.AssessorID,
			&i.RatingID,
			&i.RatingType,
			&i.IsDraft,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
