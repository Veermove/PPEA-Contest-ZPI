// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: get_assessors_for_submission.sql

package queries

import (
	"context"
)

const getAssessorsForSubmission = `-- name: GetAssessorsForSubmission :many
select
    base.first_name      as "first_name",
    base.last_name       as "last_name",
    assessor.assessor_id as "assessor_id"
from project.assessor_submission
inner join person.assessor    as assessor    on assessor.assessor_id = assessor_submission.assessor_id -- join to get ipma_expert_id
inner join person.ipma_expert as ipma_expert on ipma_expert.ipma_expert_id = assessor.ipma_expert_id   -- join to get person_id
inner join person.base        as base        on base.person_id = ipma_expert.person_id                 -- join to get first_name and last_name
where assessor_submission.submission_id = $1
`

type GetAssessorsForSubmissionRow struct {
	FirstName  string
	LastName   string
	AssessorID int32
}

func (q *Queries) GetAssessorsForSubmission(ctx context.Context, submissionID int32) ([]GetAssessorsForSubmissionRow, error) {
	rows, err := q.db.Query(ctx, getAssessorsForSubmission, submissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAssessorsForSubmissionRow
	for rows.Next() {
		var i GetAssessorsForSubmissionRow
		if err := rows.Scan(&i.FirstName, &i.LastName, &i.AssessorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
