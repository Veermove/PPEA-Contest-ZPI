// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: get_user_claims.sql

package queries

import (
	"context"
	"database/sql"
)

const getUserClaims = `-- name: GetUserClaims :one
select
    person.person_id,
    person.first_name,
    person.last_name,
    awards_representative.awards_representative_id,
    jury_member.jury_member_id,
    ipma_expert.ipma_expert_id,
    applicant.applicant_id,
    assessor.assessor_id
from person.base as person
left join person.awards_representative as awards_representative
    on person.person_id = awards_representative.person_id
left join person.jury_member as jury_member
    on person.person_id = jury_member.person_id
left join person.ipma_expert as ipma_expert
    on person.person_id = ipma_expert.person_id
left join person.applicant as applicant
    on person.person_id = applicant.person_id
left join person.assessor as assessor
    on ipma_expert.ipma_expert_id = assessor.ipma_expert_id
where person.email = $1
`

type GetUserClaimsRow struct {
	PersonID               int32
	FirstName              string
	LastName               string
	AwardsRepresentativeID sql.NullInt32
	JuryMemberID           sql.NullInt32
	IpmaExpertID           sql.NullInt32
	ApplicantID            sql.NullInt32
	AssessorID             sql.NullInt32
}

func (q *Queries) GetUserClaims(ctx context.Context, email string) (GetUserClaimsRow, error) {
	row := q.db.QueryRow(ctx, getUserClaims, email)
	var i GetUserClaimsRow
	err := row.Scan(
		&i.PersonID,
		&i.FirstName,
		&i.LastName,
		&i.AwardsRepresentativeID,
		&i.JuryMemberID,
		&i.IpmaExpertID,
		&i.ApplicantID,
		&i.AssessorID,
	)
	return i, err
}
