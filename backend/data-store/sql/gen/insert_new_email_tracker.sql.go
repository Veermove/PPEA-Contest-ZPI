// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: insert_new_email_tracker.sql

package queries

import (
	"context"
)

const getEmailTracker = `-- name: GetEmailTracker :one
insert into emails.sent_for_one_rating (
    assessor_id,
    submission_id,
    rating_type
) values (
    $1,
    $2,
    $3
)
on conflict (assessor_id, submission_id, rating_type) -- this update does nothing.
    do update set rating_type = excluded.rating_type  -- it's here just to make sure that the row returned.
returning assessor_id, submission_id, rating_type, emails_sent
`

type GetEmailTrackerParams struct {
	AssessorID   int32
	SubmissionID int32
	RatingType   ProjectRatingType
}

func (q *Queries) GetEmailTracker(ctx context.Context, arg GetEmailTrackerParams) (EmailsSentForOneRating, error) {
	row := q.db.QueryRow(ctx, getEmailTracker, arg.AssessorID, arg.SubmissionID, arg.RatingType)
	var i EmailsSentForOneRating
	err := row.Scan(
		&i.AssessorID,
		&i.SubmissionID,
		&i.RatingType,
		&i.EmailsSent,
	)
	return i, err
}
