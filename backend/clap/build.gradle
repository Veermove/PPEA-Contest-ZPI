plugins {
    id("org.springframework.boot") version "3.1.4"
    id 'com.google.protobuf' version '0.8.17'

    id("io.spring.dependency-management") version "1.1.3"
    id("io.github.lognet.grpc-spring-boot") version "5.1.5"
    id("jacoco")
}

apply plugin: 'java'

repositories {
    google()
    mavenCentral()
}


dependencies {
    implementation(
            "com.google.firebase:firebase-admin:9.2.0",
            "net.devh:grpc-client-spring-boot-starter:2.15.0.RELEASE",
            "org.bitbucket.b_c:jose4j:0.9.3",
            "org.mapstruct:mapstruct:1.5.5.Final",
            "org.projectlombok:lombok",
            "org.springframework.boot:spring-boot-starter",
            "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-cache",
            "org.springframework.security:spring-security-oauth2-client",
            "org.springframework.security:spring-security-oauth2-jose",
            "org.springframework.security:spring-security-oauth2-resource-server",
            "org.springframework.boot:spring-boot-starter-validation",
            "com.github.ben-manes.caffeine:caffeine:3.1.8",
            "org.springframework.boot:spring-boot-starter-webflux"
    )
    annotationProcessor(
            "org.projectlombok:lombok",
            "org.mapstruct:mapstruct-processor:1.5.5.Final"
    )
    developmentOnly(
            "org.springframework.boot:spring-boot-devtools"
    )
    testImplementation(
            "org.springframework.boot:spring-boot-starter-test",
            "org.testcontainers:junit-jupiter:1.19.2",
            "io.rest-assured:rest-assured",
            "org.mock-server:mockserver-netty:5.15.0",
            "org.testng:testng:7.1.0"
    )
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.7' // Use the appropriate Protobuf compiler version
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
        }
    }
}

sourceSets {
    main {
        proto {
            srcDirs 'proto' // Replace with the actual path to your .proto files
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "data_store",
                    "zpi/ppea/clap/dtos/**",
                    "zpi/ppea/clap/logic/RatedCriterion.class",
                    "zpi/ppea/clap/config/**",
                    "zpi/ppea/clap/security/**",
                    "zpi/ppea/clap/repository/**",
                    "zpi/ppea/clap/exceptions/**",
                    "zpi/ppea/clap/ClapApplication.class"
            ])
        }))
    }
}
