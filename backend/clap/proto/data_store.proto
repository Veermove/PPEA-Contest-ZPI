// Proto file from the shared folder
syntax = "proto3";

package data_store;

option java_multiple_files = true;
option java_outer_classname = "DataStoreProto";
option go_package = "github.com/Veermove/zpi/data-store";

enum ProjectState {
    DRAFT = 0;
    SUBMITTED = 1;
    ACCEPTED = 2;
    REJECTED = 3;;
}

enum RatingType {
    INDIVIDUAL = 0;
    INITIAL = 1;
    FINAL = 2;
}

message SubmissionRequest {
    int32 contest_id = 1;
}

message DetailsSubmissionRequest {
    int32 submission_id = 1;
}

message RatingsSubmissionRequest {
    int32 submission_id = 1;
    int32 constest_id   = 2;
}

message SubmissionsResponse {
    repeated Submission submissions = 1;
}

message Submission {
    int32  submission_id = 1;
    int32  year          = 2;
    string name          = 3;
    int32  duration_days = 4;

    repeated Assessor assessors = 5;
    repeated Rating   ratings   = 6;
}

message Assessor {
    string first_name  = 1;
    string last_name   = 2;
    int32  assessor_id = 3;
}

message Rating {
    int32      rating_id   = 1;
    bool       is_draft    = 2;
    int32      assessor_id = 3;
    RatingType type        = 4;
}

message DetailsSubmissionResponse {
    int32        team_size   = 1;
    string       finish_date = 2;
    ProjectState status      = 3;
    double       budget      = 4;
    string       description = 5;
}

message Criterion {
    int32 criterion_id = 1;
    string name        = 2;
    string description = 3;
    string area        = 4;
    string criteria    = 5;
    string subcriteria = 6;
}

message PartialRating {
    int32  criterion_id  = 1;
    int32  points        = 2;
    string justification = 3;
}

message AssessorRatings {
    int32 assessor_id = 1;
    string first_name = 2;
    string last_name  = 3;
    repeated PartialRating partial_ratings = 4;
}

message RatingsSubmissionResponse {
    repeated Criterion criteria = 1;

    AssessorRatings individual = 2;
    AssessorRatings initial    = 3;
    AssessorRatings final      = 4;
}

service DataStore {
    rpc GetSubmissions      (SubmissionRequest)        returns (SubmissionsResponse)       {}
    rpc GetSubmissionDetails(DetailsSubmissionRequest) returns (DetailsSubmissionResponse) {}
    rpc GetSubmissionRatings(RatingsSubmissionRequest) returns (RatingsSubmissionResponse) {}
}

