// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: pb/data_store.proto

package store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataStore_HelloWorld_FullMethodName = "/store.DataStore/HelloWorld"
)

// DataStoreClient is the client API for DataStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataStoreClient interface {
	HelloWorld(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type dataStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewDataStoreClient(cc grpc.ClientConnInterface) DataStoreClient {
	return &dataStoreClient{cc}
}

func (c *dataStoreClient) HelloWorld(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, DataStore_HelloWorld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataStoreServer is the server API for DataStore service.
// All implementations must embed UnimplementedDataStoreServer
// for forward compatibility
type DataStoreServer interface {
	HelloWorld(context.Context, *Req) (*Res, error)
	mustEmbedUnimplementedDataStoreServer()
}

// UnimplementedDataStoreServer must be embedded to have forward compatible implementations.
type UnimplementedDataStoreServer struct {
}

func (UnimplementedDataStoreServer) HelloWorld(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedDataStoreServer) mustEmbedUnimplementedDataStoreServer() {}

// UnsafeDataStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataStoreServer will
// result in compilation errors.
type UnsafeDataStoreServer interface {
	mustEmbedUnimplementedDataStoreServer()
}

func RegisterDataStoreServer(s grpc.ServiceRegistrar, srv DataStoreServer) {
	s.RegisterService(&DataStore_ServiceDesc, srv)
}

func _DataStore_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStore_HelloWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).HelloWorld(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// DataStore_ServiceDesc is the grpc.ServiceDesc for DataStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.DataStore",
	HandlerType: (*DataStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _DataStore_HelloWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/data_store.proto",
}
